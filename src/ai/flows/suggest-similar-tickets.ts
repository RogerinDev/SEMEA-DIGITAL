// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview Suggests similar resolved tickets to help officials find examples and best practices for resolving the current request more efficiently.
 *
 * - suggestSimilarTickets - A function that suggests similar resolved tickets.
 * - SuggestSimilarTicketsInput - The input type for the suggestSimilarTickets function.
 * - SuggestSimilarTicketsOutput - The return type for the suggestSimilarTickets function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SuggestSimilarTicketsInputSchema = z.object({
  ticketDescription: z.string().describe('The description of the current ticket.'),
  ticketType: z.string().describe('The type of the current ticket (e.g., castracao_animal, corte_arvore_risco).'),
  resolvedTickets: z.array(
    z.object({
      ticketId: z.string().describe('The ID of the resolved ticket.'),
      description: z.string().describe('The description of the resolved ticket.'),
      resolution: z.string().describe('The resolution of the resolved ticket.'),
    })
  ).describe('A list of resolved tickets with their descriptions and resolutions.'),
});
export type SuggestSimilarTicketsInput = z.infer<typeof SuggestSimilarTicketsInputSchema>;

const SuggestSimilarTicketsOutputSchema = z.array(
  z.object({
    ticketId: z.string().describe('The ID of the similar resolved ticket.'),
    similarityScore: z.number().describe('A score indicating the similarity of the resolved ticket to the current ticket (0-1).'),
  })
).describe('A list of similar resolved tickets, ranked by similarity score.');
export type SuggestSimilarTicketsOutput = z.infer<typeof SuggestSimilarTicketsOutputSchema>;

export async function suggestSimilarTickets(input: SuggestSimilarTicketsInput): Promise<SuggestSimilarTicketsOutput> {
  return suggestSimilarTicketsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'suggestSimilarTicketsPrompt',
  input: {schema: SuggestSimilarTicketsInputSchema},
  output: {schema: SuggestSimilarTicketsOutputSchema},
  prompt: `You are an AI assistant helping officials find similar resolved tickets.

  Given the current ticket description and type, and a list of resolved tickets with their descriptions and resolutions, suggest the top 3 most similar resolved tickets.
  Return a list of ticket IDs and a similarity score (0-1) for each suggested ticket, ranked by similarity score in descending order.

  Current Ticket Description: {{{ticketDescription}}}
  Current Ticket Type: {{{ticketType}}}

  Resolved Tickets:
  {{#each resolvedTickets}}
  Ticket ID: {{{ticketId}}}
  Description: {{{description}}}
  Resolution: {{{resolution}}}
  {{/each}}

  Output format: 
  [{
  "ticketId": "<ticket_id>",
  "similarityScore": <similarity_score>
  }]
  `,
});

const suggestSimilarTicketsFlow = ai.defineFlow(
  {
    name: 'suggestSimilarTicketsFlow',
    inputSchema: SuggestSimilarTicketsInputSchema,
    outputSchema: SuggestSimilarTicketsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
